#! /bin/bash
export LANG=C

debug() {
        $debugging && echo >&2 "$@"
}

export -f debug

usage() {
    echo >&2 "usage: ${0##*/} <option> "
    echo >&2 "The rpm will be named as <package name>-<package version>-<release-version>.core2_64.rpm"
    echo >&2 "   options are following:"
    echo >&2 "   --pkg-sign Package and sign the user installed utilities with IMA and GPG key."
    echo >&2 "   --spec-file specify the spec file, if it is omitted, the spec will be auto generated."
    echo >&2 "   --pkg-name specify the application name, which is also the basename of the generated rpm."
    echo >&2 "   --pkg-version specify the application version."
    echo >&2 "   --pkg-release specify the application release version."
    echo >&2 "   --pkg-dir specify the application install directory, all files under this directory will be packaged."
    echo >&2 "   --gpg-key The GPG key file for rpm signing, which will be imported to gpg keyring SDK sysroot."
    echo >&2 "   --gpg-pass GPG key password"
    echo >&2 "   --gpg-name GPG name for rpm signing"
    echo >&2 "   --ima-key The IMA private key file for IMA signing."
    echo >&2 "   --ima-pass IMA key password"
    echo >&2 "   --rpm-dir The output directory, where the package is generated."
    echo >&2 "   --repo-sign Sign/Resign the whole repo with IMA and GPG key."
    echo >&2 "   --repo-dir The repo directory to be signed."
    echo >&2 "   --pkg-arch The architecture of the package."
    exit 1
}

# Are we debugging?
debugging=false
export debugging

# Setting this to echo disables all operations
try=""
export try

pkg_sign=0
pkg_name=""
pkg_version=""
pkg_release=""
install_dir=""
gpg_key=""
gpg_pass=""
gpg_name=""
ima_key=""
ima_pass=""
rpm_dir=""
spec_file=""
sdk_native_dir=`env |grep OECORE_NATIVE_SYSROOT|cut -d= -f2`
repo_sign=0
repo_dir=""
enable_ima=0
pkg_arch="noarch"

while [ $# -gt 0 ]; do
    case "$1" in
        --pkg-sign)
		pkg_sign=1
		;;
        --repo-sign)
		repo_sign=1
		;;
        --repo-dir)
		repo_dir="$2"
		shift
		;;
        --pkg-name)
		pkg_name="$2"
		shift
		;;
        --pkg-version)
		pkg_version="$2"
		shift
		;;
        --pkg-release)
		pkg_release="$2"
		shift
		;;
        --pkg-dir)
		install_dir="$2"
		shift
		;;
        --spec-file)
		spec_file="$2"
		shift
		;;
        --gpg-key)
		gpg_key="$2"
		shift
		;;
        --gpg-pass)
		gpg_pass="$2"
		shift
		;;
        --gpg-name)
		gpg_name="$2"
		shift
		;;
        --ima-key)
		ima_key="$2"
		shift
		;;
        --ima-pass)
		ima_pass="$2"
		shift
		;;
        --rpm-dir)
		rpm_dir="$2"
		shift
		;;
        --pkg-arch)
		pkg_arch="$2"
		shift
		;;
	--help|-h)
		usage
		;;
        *)
		break
		;;

    esac
    shift
done

ima_env_check(){
	#enable IMA signing
	if [ -n "$ima_key" -a -e "$ima_key" ]; then
		file $ima_key | grep "private key" >/dev/null 2>&1
		if [ $? != 0 ]; then
			echo "The key is not a valid file, please specify a valid key."
			exit 1
		fi

		enable_ima=1
	fi
}

setup_env() {
    # check if required host pkgs are available
    host_pkgs="realpath gpg createrepo"
    for pkg in $host_pkgs
    do
	which $pkg >/dev/null
	if [ $? != 0 ]; then
	    echo "$pkg is not detected, please install it on your host..."
	    exit 1
	fi
    done

    ima_env_check

    #setup generic variables: sdk,rpm,gpg,etc
    if [ x$sdk_native_dir == x ]; then
	# SDK env is not set
	echo "Setting SDK environment..."
	sdk_dir=`dirname $0`/../../
	if [ ! -e $sdk_dir/environment-setup-core2-64-wrs-linux ]; then
	    echo "No env file found in SDK root directory..."
	    exit 1
	fi
	source $sdk_dir/environment-setup-core2-64-wrs-linux
    else
	# SDK env is already set
	sdk_dir=$sdk_native_dir/../../
    fi
    export MAGIC=$sdk_dir/sysroots/x86_64-wrlinuxsdk-linux/usr/share/misc/magic.mgc
    export RPM_CONFIGDIR=$sdk_dir/sysroots/x86_64-wrlinuxsdk-linux/usr/lib/rpm

    gpg_home=$sdk_dir/sysroots/x86_64-wrlinuxsdk-linux/etc/gpg
    gpg_bin=`which gpg`
    rpm_sign_bin=$sdk_dir/sysroots/x86_64-wrlinuxsdk-linux/usr/bin/rpmsign

    # import gpg key
    if [ ! -e $gpg_home ]; then
        mkdir -p $gpg_home
    fi

    # check if the gpg key is available
    ${gpg_bin} --no-permission-warning --homedir $gpg_home --list-keys -a  |grep $gpg_name
    if [ $? == 0 ]; then
        debug "gpg key is available..."
    elif [ x${gpg_key} == x ]; then
        echo "Missing gpg key file for ${gpg_name}..."
        exit 1
    elif [ ! -e ${gpg_key} ]; then
        echo "Specified GPG key file ${gpg_key} doesn't exist..."
        exit 1
    else
        ${gpg_bin} --homedir $gpg_home --import $gpg_key
	${gpg_bin} --no-permission-warning --homedir $gpg_home --list-keys -a  |grep $gpg_name
        if [ $? != 0 ]; then
            echo "$gpg_name is not found in keyring..."
            exit 1
        fi
    fi

    # setup variables for packaging and signing
    if [ $pkg_sign -eq 1 ]; then
	rpmbuild_bin=$sdk_dir/sysroots/x86_64-wrlinuxsdk-linux/usr/bin/rpmbuild
        rpm_file=${rpm_dir}/${pkg_name}-${pkg_version}-${pkg_release}.${pkg_arch}.rpm
	if [ x$install_dir == x ]; then
	    echo "Please specify application install directory ..."
	    exit 1
        else
	    install_dir=`realpath $install_dir`
        fi

	if [ ! -d $install_dir ]; then
	    echo "Application install directory doesn't exist..."
	    exit 1
        fi

	if [ x$rpm_dir == x ]; then
	    echo "Please specify RPM repo directory ..."
	    exit 1
	else
	    rpm_dir=`realpath $rpm_dir`
	fi

	# create the output directory if it is not available
	if [ ! -e ${rpm_dir} ]; then
	    mkdir -p ${rpm_dir}
	fi

	if [ x$spec_file == x ]; then
	    if [ x$pkg_name == x -o x$pkg_version == x -o x$pkg_release == x ]; then
		echo "Missing package name, or package version or release version..."
		exit 1
	    fi
	elif [ ! -e $spec_file ]; then
	    echo "expected spec file $spec_file is not available..."
	    exit 1
	else
	    pkg_name=`cat ${spec_file} |grep ^Name |cut -d: -f 2 |sed -e  's/[[:space:]]//g'`
            pkg_release=`cat ${spec_file} |grep ^Release |cut -d: -f 2 |sed -e  's/[[:space:]]//g'`
            pkg_version=`cat ${spec_file} |grep ^Version |cut -d: -f 2 |sed -e 's/[[:space:]]//g'`
	    if [ x$pkg_name == x -o x$pkg_version == x -o x$pkg_release == x ]; then
		echo "Can't retrieve correct package name, or package version or release version in spec file..."
		exit 1
	    fi
	fi
    fi
}

function format_spec() {
    echo "Summary: $pkg_name" > $spec_file
    echo "Name: $pkg_name" >> $spec_file
    echo "Version: $pkg_version" >> $spec_file
    echo "Release: $pkg_release" >> $spec_file
    echo "License: GPLv3" >> $spec_file
    echo "Group: user/user" >> $spec_file
    echo "%description" >> $spec_file
    echo "$pkg_name" >> $spec_file
    echo "%files" >> $spec_file

    if [ ! -d $install_dir ]; then
	echo "install directory doesn't exists!"
	exit 1
    fi

    for f in `find $install_dir`
    do
	if [ -f $f ]; then
	    echo "${f##*$install_dir}" >> $spec_file
	fi
    done

}

function generate_rpm() {
    if [  x$spec_file == x ]; then
        if [ x$pkg_name == x -o x$pkg_version == x -o x$pkg_release == x ]; then
	    echo "Missing rpm name or package version or release version..."
	    exit 1
	else
	    spec_file=`mktemp /tmp/${pkg_name}.spec.XXXXX`
	    echo "Creating new spec file $spec_file..."
            echo "Please save it and you can customize your own spec based on it ..."
            format_spec
	fi
    else
	echo "spec file: $spec_file"
    fi

    # generate rpm
    rpmbuild_bin=$sdk_dir/sysroots/x86_64-wrlinuxsdk-linux/usr/bin/rpmbuild
    $rpmbuild_bin --noclean --nodeps --short-circuit --target ${pkg_arch}-wrs-linux \
		   --buildroot ${install_dir} \
		   --define '_rpmdir '${rpm_dir}'' \
		   --define '_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm' \
		   --define '_use_internal_dependency_generator 0' \
		   --define '_binaries_in_noarch_packages_terminate_build 0' \
		   --define '_build_id_links none' \
		   --define '_binary_payload w6T.xzdio' \
		   --define '_source_payload w6T.xzdio' \
		   --define '__find_requires %{nil}' \
		   --define '__find_provides %{nil}' \
		   --define '_unpackaged_files_terminate_build 0' \
		   --define 'debug_package %{nil}' \
		   -bb ${spec_file} --quiet > /dev/null

}

function create_repo() {
    createrepo --update --quiet $1
}

function sign_rpm() {
	rpm_file=$1
	echo "signing $rpm_file"
	if [ $enable_ima -eq 1 ]; then
		${rpm_sign_bin} --addsign --define "__gpg $gpg_bin" \
			--define "_gpg_path $gpg_home" \
			--define  "_gpg_name $gpg_name" \
			--define "_gpg_sign_cmd_extra_args --no-permission-warning --batch --passphrase=$gpg_pass" \
			--define "_binary_filedigest_algorithm 8" \
			--signfiles --fskpath $ima_key \
			--define "_file_signing_key_password $ima_pass" \
			${rpm_file} --quiet > /dev/null
	else
		${rpm_sign_bin} --addsign --define "__gpg $gpg_bin" \
			--define "_gpg_path $gpg_home" \
			--define  "_gpg_name $gpg_name" \
			--define "_gpg_sign_cmd_extra_args --no-permission-warning --batch --passphrase=$gpg_pass" \
			${rpm_file} --quiet > /dev/null
	fi

}

function sign_repo() {
	for file in `find ${repo_dir} -name *.rpm`; do
	   sign_rpm $file
	done

	create_repo ${repo_dir}
}

setup_env

if [ $pkg_sign -eq 1 ]; then
    generate_rpm

    if [ "x$gpg_name" != "x" ]; then
        sign_rpm ${rpm_file}
	create_repo ${rpm_dir}
    fi
fi

if [ $repo_sign -eq 1 ]; then
    sign_repo
fi
